# Auto-generated by Puzzles

from enum import Enum


class Space(Enum):
    WALL = "#"
    FREE = "."

    STT = "S"
    END = "E"


class Direction(Enum):
    N = 0
    E = 1
    S = 2
    W = 3


def print_grid(grid: list[list[Space]]) -> None:
    for r in grid:
        for c in r:
            print(c.value, end="")
        print()


def solve():
    """
    Solution to the puzzle.
    """
    with open("day16/test.txt") as f:
        lines = f.readlines()

        grid: list[list[Space]] = []
        for line in lines:
            if not line.strip():
                continue

            row = []
            for c in line.strip():
                match c:
                    case "#":
                        row.append(Space.WALL)

                    case ".":
                        row.append(Space.FREE)

                    case "S":
                        row.append(Space.STT)

                    case "E":
                        row.append(Space.END)

                    case _:
                        raise ValueError(c)
            grid.append(row)

    print_grid(grid)


def test_solve():
    """
    Test cases for the solution.
    """
    # TODO: Add test cases
    assert True, "Add your test cases here"


if __name__ == "__main__":
    test_solve()
    solve()
